#!/bin/bash

if [ -z $ROOTACT ]; then
	echo "Error: ROOTACT not set"
	exit 1
fi

default_file="$ROOTACT/lrr/config/lowlvlgw_ciscoms.ini"
out_file="/tmp/lowlvlgw.ini"
custom_file="$ROOTACT/usr/etc/lrr/lowlvlgw.ini"

if [ ! -f $default_file ];  then
	echo "Error: $default_file not found !"
	exit 1
fi

if [ -f $custom_file ]; then
	echo "Calibration already done ($custom_file already exists)"
	exit 0
fi

PCAMAP_BIN="/usr/sbin/lora_pcamap"
type $PCAMAP_BIN > /dev/null 2>&1
if [ $? -ne 0 ]; then
	echo "Warning: $PCAMAP_BIN not found. Can't calibrate LUT tables"
	exit 1
fi

# Read EEPROM content
LUT_RES=$(${PCAMAP_BIN} show)
ret=$?
if [ $ret -ne 0 ]; then
	echo "Error: reading LUT params from EEPROM (err = $ret)"
	exit 1
fi


## Fake PP EEPROM content for debug
#LUT_RES="LORA_SN: FOC20175Z89
#LORA_PN: 95.1602T01
#LORA_SKU: 915
#LORA_CALC: <124,112,104,95,87,83,79,75,67,60,52,44,37,33,29,25-133,121,113,105,97,93,89,85,77,68,60,51,43,38,34,30>
#CAL_TEMP_CELSIUS: 32
#CAL_TEMP_CODE_AD9361: 88
#RSSI_OFFSET: -203.24,-203.59
#"

#echo -e "== DEBUG: Read EEPROM ==
#$LUT_RES"


LORA_SN=`echo -e $LUT_RES | egrep -o 'LORA_SN: .*' | awk -F " " '{print $2}'`
LORA_PN=`echo -e $LUT_RES | egrep -o 'LORA_PN: .*' | awk -F " " '{print $2}'`
LORA_SKU=`echo -e $LUT_RES | egrep -o 'LORA_SKU: .*' | awk -F " " '{print $2}'`

LUT=`echo -e $LUT_RES | egrep -o 'LORA_CALC: <.*>' | cut -d'<' -f2 | cut -d'>' -f1`
LUT0=${LUT%-*}
LUT1=${LUT#*-}
LUT0=(${LUT0//,/ })
LUT1=(${LUT1//,/ })

CT_CELSIUS=`echo -e $LUT_RES | egrep -o 'CAL_TEMP_CELSIUS: .*' | awk -F " " '{print $2}'`
CT_CODEAD=`echo -e $LUT_RES | egrep -o 'CAL_TEMP_CODE_AD9361: .*' | awk -F " " '{print $2}'`
RSOFF=`echo -e $LUT_RES | egrep -o 'RSSI_OFFSET: .*' | awk -F " " '{print $2}'`
RSOFF0=${RSOFF%,*}
RSOFF1=${RSOFF#*,}

#echo -e "== DEBUG: Extract data ==
#  LORA_SN         \t $LORA_SN
#  LORA_PN         \t $LORA_PN
#  LORA_SKU        \t $LORA_SKU
#  LUT0            \t ${LUT0[@]}
#  LUT1            \t ${LUT1[@]}
#  CAL_TEMP_CELSIUS\t $CT_CELSIUS
#  CAL_TEMP_CODE_AD\t $CT_CODEAD
#  RSSI_OFFSET 0   \t $RSOFF0
#  RSSI_OFFSET 1   \t $RSOFF1
#"


echo -e "; File generated by calibration script set_lut_calib.sh\n" > $out_file
# Write board 0 identification
echo "[board:0]" >> $out_file
echo -e "\tserial_number=$LORA_SN" >> $out_file
echo -e "\tproduct_number=$LORA_PN" >> $out_file
echo -e "\tsku=$LORA_SKU" >> $out_file

# Write board 0 temperature calibration
if [ ! -z $CT_CELSIUS ] && [ ! -z $CT_CODEAD ]; then
	echo -e "\troomtemp=$CT_CELSIUS" >> $out_file
	echo -e "\tad9361temp=$CT_CODEAD" >> $out_file
	echo -e "" >> $out_file
fi
echo -e "" >> $out_file

# Write rfconf 0 rssi offset
if [ ! -z $RSOFF0 ]; then
	echo "[rfconf:0:0]" >> $out_file
	echo -e "\trssi_offset=$RSOFF0" >> $out_file
	echo -e "" >> $out_file
fi

# Write rfconf 1 rssi offset
if [ ! -z $RSOFF1 ]; then
	echo "[rfconf:0:1]" >> $out_file
	echo -e "\trssi_offset=$RSOFF1" >> $out_file
	echo -e "" >> $out_file
fi

# Extract and update LUT table 0
orig_lut_table0=$(sed -n -e "/^\[lut\/0\/0\]/,/^$/p" $default_file | sed -e "/^$/d")
echo "[lut/0/0]" >> $out_file
echo ";	idx	=	power	dig	atten	dacvref	dacword	coef_a	coef_b" >> $out_file
idx=0
while read -r line; do
    test $idx -eq 0 && (( idx=1 )) && continue #skip [lut] line
    test $idx -eq 1 && (( idx=2 )) && continue #skip comment
    beg=`echo "$line" | cut -d$'\t' -f1-4` 
    end=`echo "$line" | cut -d$'\t' -f6-` 
    echo -e "\t$beg\t"${LUT0[$idx-2]}"\t$end" >> $out_file
    let "idx = $idx + 1"
done <<< "$orig_lut_table0"

echo -e "" >> $out_file

# Extract and update LUT table 1
orig_lut_table1=$(sed -n -e "/^\[lut\/0\/1\]/,/^$/p" $default_file | sed -e "/^$/d")
echo "[lut/0/1]" >> $out_file
echo ";	idx	=	power	dig	atten	dacvref	dacword	coef_a	coef_b" >> $out_file
idx=0
while read -r line; do
    test $idx -eq 0 && (( idx=1 )) && continue #skip [lut] line
    test $idx -eq 1 && (( idx=2 )) && continue #skip comment
#    echo "READ line $idx: $line"
    beg=`echo "$line" | cut -d$'\t' -f1-4` 
    end=`echo "$line" | cut -d$'\t' -f6-` 
#	echo "DEBUG beg = $beg"
#	echo "DEBUG end = $end"
    echo -e "\t$beg\t"${LUT1[$idx-2]}"\t$end" >> $out_file
    let "idx = $idx + 1"
done <<< "$orig_lut_table1"

mv $out_file $custom_file
echo "Calibration done"
